# -*- coding: utf-8 -*-
"""Aplikacja i pierwsze wykresy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VU7xg38dukcCVdxVHKCl5s20dQN9pcsg
"""

import streamlit as st
import plotly.graph_objects as go

# Training data for Model VGG16
epochs1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
accuracy_train1 = [0.5945, 0.5699, 0.6478, 0.6802, 0.6337, 0.7467, 0.7408, 0.6956, 0.7490, 0.7595, 0.7341, 0.7145, 0.7543, 0.7249, 0.8137, 0.7753, 0.7777, 0.8255, 0.7943, 0.7578, 0.8054, 0.8370, 0.8314, 0.8003, 0.8446, 0.8095, 0.8214, 0.8227, 0.8701, 0.8336]
loss_train1 = [5.8133, 5.7241, 5.5587, 5.4812, 5.4030, 5.2251, 5.1401, 5.1324, 4.9694, 4.8518, 4.8030, 4.7941, 4.6657, 4.6348, 4.4809, 4.4833, 4.3533, 4.2744, 4.2182, 4.1695, 4.0949, 4.0112, 3.9116, 3.9076, 3.7894, 3.7570, 3.7323, 3.6682, 3.5766, 3.5402]
accuracy_val1 = [0.6000, 0.6000, 0.6000, 0.6462, 0.7231, 0.6769, 0.7692, 0.8308, 0.7077, 0.7692, 0.6769, 0.7846, 0.7846, 0.7077, 0.7538, 0.7385, 0.7692, 0.7538, 0.7538, 0.7231, 0.8462, 0.8154, 0.8154, 0.7692, 0.8000, 0.7846, 0.8308, 0.8462, 0.8000, 0.8154]
loss_val1 = [5.7030, 5.6024, 5.4998, 5.4175, 5.3305, 5.2545, 5.1617, 5.0691, 5.0163, 4.9287, 4.8660, 4.7760, 4.7124, 4.6558, 4.5684, 4.4896, 4.4270, 4.3720, 4.3240, 4.2565, 4.1629, 4.1074, 4.0586, 4.0034, 3.9178, 3.8717, 3.8033, 3.7658, 3.7084, 3.6528]

# Training data for Convolutional Model
epochs2 = list(range(1, 17))
accuracy_train2 = [0.6322, 0.6961, 0.7285, 0.7438, 0.7529, 0.8226, 0.8504, 0.8344, 0.8815, 0.8762, 0.9073, 0.8877, 0.8964, 0.9534, 0.9551, 0.9321]
loss_train2 = [0.6189, 0.6055, 0.5566, 0.5177, 0.5399, 0.4506, 0.4148, 0.3885, 0.2989, 0.3301, 0.2418, 0.2458, 0.2784, 0.1789, 0.1536, 0.1481]
accuracy_val2 = [0.7812, 0.8125, 0.7031, 0.7812, 0.8281, 0.7812, 0.8281, 0.8125, 0.7500, 0.7812, 0.8125, 0.7188, 0.7812, 0.8281, 0.8125, 0.8438]
loss_val2 = [0.5263, 0.5299, 0.5427, 0.4957, 0.4643, 0.4570, 0.4708, 0.4663, 0.4932, 0.4838, 0.4484, 0.5179, 0.4922, 0.4672, 0.4892, 0.4916]

# Metrics for both models
precision = [0.78, 0.82]
recall = [0.85, 0.88]
f1_score = [0.81, 0.85]

# Function to plot a grouped bar chart for precision, recall, and F1-score
def plot_metrics(precision, recall, f1_score):
    fig = go.Figure(data=[
        go.Bar(name='Precision', x=['VGG16', 'Convolutional Model'], y=precision, marker=dict(color='blue')),
        go.Bar(name='Recall', x=['VGG16', 'Convolutional Model'], y=recall, marker=dict(color='green')),
        go.Bar(name='F1-Score', x=['VGG16', 'Convolutional Model'], y=f1_score, marker=dict(color='orange'))
    ])
    fig.update_layout(
        title='Comparison of Metrics for VGG16 and Convolutional Model',
        barmode='group',
        xaxis_title='Model',
        yaxis_title='Value',
        template='plotly_dark'
    )
    st.plotly_chart(fig)

# Function to plot accuracy for both training and validation
def plot_accuracy(epochs, accuracy_train, accuracy_val, model_name):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=epochs, y=accuracy_train, mode='lines+markers', name=f'Training Accuracy ({model_name})', line=dict(color='blue')))
    fig.add_trace(go.Scatter(x=epochs, y=accuracy_val, mode='lines+markers', name=f'Validation Accuracy ({model_name})', line=dict(color='green')))
    fig.update_layout(title=f'Training and Validation Accuracy Comparison ({model_name})',
                      xaxis_title='Epoch',
                      yaxis_title='Accuracy',
                      template='plotly_dark')
    st.plotly_chart(fig)

def plot_loss(epochs, loss_train, loss_val, model_name):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=epochs, y=loss_train, mode='lines+markers', name=f'Training Loss ({model_name})', line=dict(color='red')))
    fig.add_trace(go.Scatter(x=epochs, y=loss_val, mode='lines+markers', name=f'Validation Loss ({model_name})', line=dict(color='orange')))
    fig.update_layout(title=f'Training and Validation Loss Comparison ({model_name})',
                      xaxis_title='Epoch',
                      yaxis_title='Loss',
                      template='plotly_dark')
    st.plotly_chart(fig)

# Main Streamlit app
st.title('Machine Learning Models Analysis')

# Plots for Model VGG16
st.subheader('VGG16: Accuracy')
plot_accuracy(epochs1, accuracy_train1, accuracy_val1, "VGG16")

st.subheader('VGG16: Loss')
plot_loss(epochs1, loss_train1, loss_val1, "VGG16")

# Plots for Convolutional Model
st.subheader('Convolutional Model: Accuracy')
plot_accuracy(epochs2, accuracy_train2, accuracy_val2, "Convolutional Model")

st.subheader('Convolutional Model: Loss')
plot_loss(epochs2, loss_train2, loss_val2, "Convolutional Model")

# Comparison of metrics
st.subheader('Comparison of Metrics (Precision, Recall, F1-score)')
plot_metrics(precision, recall, f1_score)